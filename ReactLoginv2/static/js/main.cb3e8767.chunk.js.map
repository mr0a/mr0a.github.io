{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responseGoogle","response","console","log","profileObj","localStorage","setItem","JSON","stringify","setState","userDetails","isUserLoggedIn","errorResponse","alert","logout","clear","state","details","getItem","parse","react_default","a","createElement","className","google_login","clientId","render","renderProps","onClick","onLogoutSuccess","src","imageUrl","alt","givenName","familyName","email","Card","CardBody","CardTitle","tag","Form","FormGroup","Label","for","Input","type","name","id","Button","google_login_default","disabled","onSuccess","onFailure","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb3e8767.chunk.js","sourcesContent":["import React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { GoogleLogout } from 'react-google-login';\nimport {Card, CardTitle, CardBody } from 'reactstrap';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nimport './App.scss';\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tuserDetails: {},\n\t\t\tisUserLoggedIn: false,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst details = localStorage.getItem('userDetails');\n\t\tconsole.log(JSON.parse(details));\n\t\tif (details) {\n\t\t\tthis.setState({ userDetails: JSON.parse(details), isUserLoggedIn: true });\n\t\t}\n\t}\n\n\tresponseGoogle = (response) => {\n\t\tconsole.log(response.profileObj);\n\t\tlocalStorage.setItem('userDetails', JSON.stringify(response.profileObj));\n\t\tthis.setState({ userDetails: response.profileObj, isUserLoggedIn: true });\n\t};\n\n\terrorResponse = (response) => {\n\t\talert(\"Failed to login\");\n\t};\n\n\tlogout = () => {\n\t\tlocalStorage.clear();\n\t\tthis.setState({ userDetails: {}, isUserLoggedIn: false });\n\t};\n\n\trender() {\n\t\tif (!this.state.isUserLoggedIn) {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"box\">\n\t\t\t\t\t\t<h2>BIT Captive Portal</h2>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t\t<CardTitle tag='h4'>Login</CardTitle>\n\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t\t<Label for=\"exampleEmail\">Roll Number</Label>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"email\" name=\"email\" id=\"exampleEmail\" />\n\t\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t\t<Label for=\"exampleEmail\">Password</Label>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"email\" name=\"email\" id=\"exampleEmail\" />\n\t\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t\t<Button>Submit</Button>\n\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t<GoogleLogin\n\t\t\t\t\t\t\tclientId=\"994186259491-l7r3mv92dbkmh6jo3cvaa1v760kc4d4h.apps.googleusercontent.com\"\n\t\t\t\t\t\t\trender={(renderProps) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={renderProps.onClick}\n\t\t\t\t\t\t\t\t\tdisabled={renderProps.disabled}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc=\"icons/google.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"google login\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"icon\"\n\t\t\t\t\t\t\t\t\t></img>\n\t\t\t\t\t\t\t\t\t<span className=\"buttonText\">Sign in with Google</span>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonSuccess={this.responseGoogle}\n\t\t\t\t\t\t\tonFailure={this.errorResponse}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"userDetails-wrapper\">\n\t\t\t\t\t<div className=\"details-wrapper\">\n\t\t\t\t\t\t<GoogleLogout\n\t\t\t\t\t\t\tclientId=\"994186259491-l7r3mv92dbkmh6jo3cvaa1v760kc4d4h.apps.googleusercontent.com\"\n\t\t\t\t\t\t\trender={(renderProps) => (\n\t\t\t\t\t\t\t\t<button className=\"logout-button\" onClick={renderProps.onClick}>\n\t\t\t\t\t\t\t\t\tLog Out\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tonLogoutSuccess={this.logout}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<div className=\"image\">\n\t\t\t\t\t\t\t<img src={this.state.userDetails.imageUrl} alt=\"User\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\tWelcome Mr. {this.state.userDetails.givenName}{' '}\n\t\t\t\t\t\t\t{this.state.userDetails.familyName}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"email\">\n\t\t\t\t\t\t\t<i>{this.state.userDetails.email}</i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/*<div className=\"bar\" />\n\t\t\t\t\t<div className=\"stand\" />*/}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}